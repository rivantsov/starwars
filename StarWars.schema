scalar Double
scalar ID
scalar DateTime
scalar Date
scalar Time
scalar Uuid


"The episodes in the Star Wars trilogy"
enum Episode {

  "Star Wars Episode IV: A New Hope, released in 1977."
  NEW_HOPE

  "Star Wars Episode V: The Empire Strikes Back, released in 1980."
  EMPIRE

  "Star Wars Episode VI: Return of the Jedi, released in 1983."
  JEDI
}


"Units of length or height."
enum LengthUnit {

  "The standard unit around the world."
  METER

  "Primarily used in the United States."
  FOOT
}


"""
Encodes emoji(s) accompanying review. This enum is added to demonstrate use of multi-valued (Flags)
            enums in NGraphQL
"""
enum Emojis {
  LIKE
  DISLIKE
  SMILE
  EXCITED
  BORED
}


"A character from the Star Wars universe"
interface Character {

  "The ID of the character"
  id: ID!

  "The name of the character"
  name: String!

  "The friends of the character, or an empty list if they have none"
  friends: [Character!]!

  "The movies this character appears in"
  appearsIn: [Episode!]!
}


"The input object sent when someone is creating a new review"
input ReviewInput {

  "0-5 stars"
  stars: Int!

  "Comment about the movie, optional"
  commentary: String!
  emojis: [Emojis!]!
}

union SearchResult = Human | Droid | Starship


"A humanoid creature from the Star Wars universe"
type Human implements Character {

  "Height in the preferred unit, default is meters"
  height (unit: LengthUnit! = METER): Float

  "The ID of the human"
  id: ID!

  "What this human calls themselves"
  name: String!

  "This human's friends, or an empty list if they have none"
  friends: [Character!]!

  "The movies this human appears in"
  appearsIn: [Episode!]!

  "The home planet of the human, or null if unknown"
  homePlanet: String

  "Mass in kilograms, or null if unknown"
  mass: Float

  "A list of starships this person has piloted, or an empty list if none"
  starships: [Starship!]!
}


"An autonomous mechanical character in the Star Wars universe"
type Droid implements Character {

  "The ID of the droid"
  id: ID!

  "What others call this droid"
  name: String!

  "This droid's friends, or an empty list if they have none"
  friends: [Character!]!

  "The movies this droid appears in"
  appearsIn: [Episode!]!

  "This droid's primary function"
  primaryFunction: String!
}

type Starship {

  "Length of the starship, along the longest axis"
  length (unit: LengthUnit! = METER): Float

  "The ID of the starship"
  id: ID!

  "The name of the starship"
  name: String!
  coordinates: [[Float!]]
}


"Represents a review for a movie"
type Review {

  "The movie"
  episode: Episode!

  "The number of stars this review gave, 1-5"
  stars: Int!

  "Comment about the movie"
  commentary: String!
  emojis: [Emojis!]!
}

type Query {
  starship (id: ID!): Starship!
  characters (episode: Episode!): [Character!]!
  character (id: ID!): Character!
  reviews (episode: Episode!): [Review!]!
  search (text: String!): [SearchResult!]!
  episodes: Episode!
  starships: [Starship!]!
}

type Mutation {
  createReview (episode: Episode!, reviewInput: ReviewInput!): Review!
}

type Schema {
  query: Query
  mutation: Mutation
}

